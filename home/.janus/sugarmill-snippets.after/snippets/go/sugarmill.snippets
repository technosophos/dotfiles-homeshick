snippet sugar
	"bitbucket.org/mobiplug/sugarmill/${1:}"
snippet imprvt
	"bitbucket.org/mobiplug/rvt"
snippet luge
	"bitbucket.org/mobiplug/luge/${1:}"
snippet sugerdb
	"bitbucket.org/mobiplug/sugarmill/db"
snippet sugarcompat
	"bitbucket.org/mobiplug/sugarmill/compat"
snippet stest
	func Test${1:Foo}(t *testing.T) {
		reg, router, c := harness.New()
		h := test.DummyHub(c)

		req := new(rvt.Rvt$1Request)

		reg.Route("t", "test").Does($1, "r").
			Using("request").WithDefault(req)

		router.HandleRequest("t", c, true)

		res := c.Get("r", nil).(*rvt.Rvt$1Response)

		h.Delete()
	}
snippet newtest
	import(
		"testing"
		"bitbucket.org/mobiplug/sugarmill/test"
		"bitbucket.org/mobiplug/sugarmill/test/harness"
		"bitbucket.org/mobiplug/rvt"
	)
snippet stbl
	\`stbl:"${1:}"\`
snippet impstruct
	"github.com/technosophos/structable"
	$1
snippet impsquirrel
	"github.com/lann/squirrel"
	$1
snippet arfields
	rec structable.Recorder
	builder *squirrel.StatementBuilderType
	db squirrel.DBProxyBeginner
snippet arnew
	func New${1:Model}(c cookoo.Context) *$1 {
		${2:n} := new($1)
		$2.cxt = c
		$2.db, $2.builder, $2.rec = instruct(c)
		$2.rec = $2.rec.Bind($1Table, $2)

		return $2
	}
snippet stblnew
	package model

	import (
		"github.com/Masterminds/cookoo"
		"github.com/lann/squirrel"
		"github.com/technosophos/structable"
		// "bitbucket.org/mobiplug/luge/db"
	)

	const ${1:MyType}Table = "${2:my_table_name}"

	// $1 represents a $2 table as a struct.
	type $1 struct {
		Id        int     \`stbl:"id,PRIMARY_KEY,SERIAL"\`

		cxt     cookoo.Context
		rec     structable.Recorder
		builder *squirrel.StatementBuilderType
		db      squirrel.DBProxyBeginner
	}

	// New$1 creates a new $1.
	func New$1(c cookoo.Context) *$1{
		f := new($1)
		f.cxt = c
		f.db, f.builder, f.rec = instruct(c)
		f.rec = f.rec.Bind($1Table, f)

		return f
	}

	// Insert creates a new record.
	func (r *$1) Insert() error {
		return r.rec.Insert()
	}

	// Update modifies an existing record
	func (r *$1) Update() error {
		return r.rec.Update()
	}

	// Delete removes a record.
	func (r *$1) Delete() error {
		return r.rec.Delete()
	}

	// Has returns true if the record exists.
	func (r *$1) Has() (bool, error) {
		return r.rec.Exists()
	}

	// Save creates a record, or updates it if it already exists
	func (r *$1) Save() error {
		if ok, _ := r.Has(); ok {
			return r.Update()
		}
		return r.Insert()
	}

	// Load populates the struct with data from storage.
	// It presumes that the id field is set.
	func (r *$1) Load() error {
		return r.rec.Load()
	}

