# Cookoo snippets
snippet testcoo
	reg, router, cxt := cookoo.Cookoo()

	reg.Route("test", "Test route").
		Does(${1}, "res")

	err := router.HandleRequest("test", cxt, true)
	if err != nil {
		t.Error(err)
	}
snippet ccmd
	func ${1:MyCommand}(c cookoo.Context, p *cookoo.Params) (interface{}, cookoo.Interrupt) {
		${2}
	}
snippet impcoo
	"github.com/Masterminds/cookoo"
snippet impweb
	"github.com/Masterminds/cookoo/web"
snippet impdb
	dbutil "github.com/Masterminds/cookoo/database/sql"
snippet impcli
	"github.com/Masterminds/cookoo/cli"
snippet logf
	c.Logf("${1:debug}", "${2}")
snippet reqval
	ok, missing := p.RequiresValue(${1})
	if !ok {
		return nil, &cookoo.FatalError{"Missing required fields: " + strings.Join(missing, ", ")}
	}
snippet actrec
	import (
		dbutil "github.com/Masterminds/cookoo/database/sql"
		"github.com/Masterminds/cookoo"
		"bitbucket.org/mobiplug/sugarmill/db"
	)

	type ${1:STRUCT} struct {
		Id int

		stmt dbutil.StmtCache
		cxt cookoo.Context
	}

	func New$1(cxt cookoo.Context) *$1 {
		r := new($1)
		r.stmt = db.StmtCache(cxt)
		r.cxt = cxt

		return r
	}
	// Insert creates a new record.
	func (r *$1) Insert() error {
		q, err := r.stmt.Get(\`INSERT INTO ${2:SQL_TABLE} () VALUES ()\`)
		if err != nil {
			return err
		}

		res, err := q.Exec()
		if err != nil {
			return err
		}

		id, err := res.LastInsertId()
		r.Id = int(id)

		return err

	}
	// Update modifies an existing record
	func (r *$1) Update() error {
		q, err := r.stmt.Get(\`UPDATE $2 SET WHERE id = ?\`)
		if err != nil {
			return err
		}
		_, err = q.Exec(r.Id)
		return err
	}
	func (r *$1) Delete() error {
		q, err := r.stmt.Get(\`DELETE FROM $2 WHERE id = ?\`)
		if err != nil {
			return err
		}
		_, err = q.Exec(r.Id)
		return err
	}
	// Has returns true if the record exists.
	func (r *$1) Has() (bool, error) {
		q, err := r.stmt.Get(\`SELECT COUNT(id) FROM $2 WHERE id = ?\`)
		if err != nil {
			return false, err
		}

		total := 0
		err = q.QueryRow(r.Id).Scan(&total)
		return total > 0, err
	}
	// Save creates a record, or updates it if it already exists
	func (r *$1) Save() error {
		if ok, _ := r.Has(); ok {
			return r.Update()
		}
		return r.Insert()
	}
	// Load populates the struct with data from storage.
	// It presumes that the id field is set.
	func (r *$1) Load() error {
		q, err := r.stmt.Get(\`SELECT  FROM $2 WHERE id = ?\`)
		if err != nil {
			return err
		}

		err = q.QueryRow(r.Id).Scan()
		return err

	}
snippet qs
	q, err := stmt.Get(\`${1}\`)
	if err != nil {
		return err
	}
snippet scache
	stmt := c.Datasource("stmt").(dbutil.StmtCache)
	
